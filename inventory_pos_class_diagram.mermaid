classDiagram
    class User {
        +string id
        +string username
        +string email
        +string passwordHash
        +string role
        +Date createdAt
        +Date updatedAt
        +authenticate(password) boolean
        +hasPermission(action) boolean
    }

    class InventoryItem {
        +string id
        +string name
        +string description
        +string sku
        +number quantity
        +number costPerUnit
        +string unit
        +string category
        +number reorderLevel
        +Date createdAt
        +Date updatedAt
        +getTotalCost() number
        +adjustQuantity(amount) void
        +updateCost(newCost) void
    }

    class Product {
        +string id
        +string name
        +string description
        +string sku
        +number quantity
        +number sellingPrice
        +number productionCost
        +boolean isActive
        +Date createdAt
        +Date updatedAt
        +getProfit() number
        +getMargin() number
        +updateSellingPrice(price) void
        +produceItems(quantity) void
    }

    class Recipe {
        +string id
        +string productId
        +Array~MaterialRequirement~ materials
        +Date createdAt
        +Date updatedAt
        +calculateProductionCost() number
        +canProduce(quantity) boolean
        +produceProduct(quantity) void
    }

    class MaterialRequirement {
        +string inventoryItemId
        +number quantity
        +getCost() number
    }

    class Sale {
        +string id
        +string customerId
        +string userId
        +Date saleDate
        +Array~SaleItem~ items
        +number subtotal
        +number taxAmount
        +number discountAmount
        +number totalAmount
        +string paymentMethod
        +string status
        +Date createdAt
        +Date updatedAt
        +calculateTotals() void
        +addItem(productId, quantity, price) void
        +removeItem(saleItemId) void
        +generateReceipt() Receipt
        +voidSale() boolean
        +recordPayment(method, amount) void
    }

    class SaleItem {
        +string id
        +string saleId
        +string productId
        +number quantity
        +number unitPrice
        +number totalPrice
        +calculateTotalPrice() number
    }

    class Customer {
        +string id
        +string name
        +string email
        +string phone
        +string address
        +Date createdAt
        +Date updatedAt
        +getSalesHistory() Array~Sale~
        +getTotalSpent() number
    }

    class Receipt {
        +string id
        +string saleId
        +Date issueDate
        +string format
        +generateHTML() string
        +generatePDF() Buffer
        +print() void
        +email(address) void
    }

    class InventoryTransaction {
        +string id
        +string inventoryItemId
        +string type
        +number quantity
        +number costPerUnit
        +string referenceId
        +string reason
        +Date transactionDate
        +string userId
        +Date createdAt
        +Date updatedAt
    }

    class ProductionBatch {
        +string id
        +string productId
        +number quantity
        +number productionCost
        +Date productionDate
        +string userId
        +string status
        +Date createdAt
        +Date updatedAt
        +completeProduction() void
    }

    class Dashboard {
        +getSummaryMetrics() Object
        +getInventoryAlerts() Array
        +getRecentSales() Array~Sale~
        +getRevenueChart(period) ChartData
        +getCostBreakdown() Object
    }

    class ReportGenerator {
        +generateSalesReport(startDate, endDate) Report
        +generateInventoryReport() Report
        +generateCostReport(startDate, endDate) Report
        +generateProfitReport(startDate, endDate) Report
        +exportToCSV(data) string
        +exportToPDF(data) Buffer
    }

    User "1" -- "*" Sale : creates
    Sale "1" -- "*" SaleItem : contains
    Sale "1" -- "1" Receipt : generates
    Sale "1" -- "1" Customer : belongs to
    Product "1" -- "*" SaleItem : sold as
    Product "1" -- "1" Recipe : produced using
    Recipe "1" -- "*" MaterialRequirement : requires
    MaterialRequirement "*" -- "1" InventoryItem : uses
    InventoryItem "1" -- "*" InventoryTransaction : records
    Product "1" -- "*" ProductionBatch : produces
    User "1" -- "*" ProductionBatch : records
    User "1" -- "*" InventoryTransaction : performs